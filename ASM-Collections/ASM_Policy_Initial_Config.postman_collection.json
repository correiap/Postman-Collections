{
	"info": {
		"name": "ASM Policy Initial Config",
		"_postman_id": "80d7cf3e-50f4-e3bd-9561-39ab954b205a",
		"description": "Collection to create Pools, Profiles, Traffic Policies, Virtual Servers, and ASM Policies\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AUTHENTICATION",
			"description": "Authenticate user and grab Token",
			"item": [
				{
					"name": "1 Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has token: \" +respData.token.token] = respData.token.token;",
									"",
									"postman.setEnvironmentVariable('bigip_auth_token',respData.token.token);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{bigip_username}}\",\n  \"password\": \"{{bigip_password}}\",\n  \"loginProvidername\":\"tmos\"\n}\n"
						},
						"url": {
							"raw": "https://{{bigip_mgmt}}/mgmt/shared/authn/login",
							"protocol": "https",
							"host": [
								"{{bigip_mgmt}}"
							],
							"path": [
								"mgmt",
								"shared",
								"authn",
								"login"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "LTM Configuration",
			"description": "",
			"item": [
				{
					"name": "SSL",
					"description": "Install SSL Certificate from a local file - SSL PCKS12 must be imported to /var/tmp/ssl_certs before running this collection",
					"item": [
						{
							"name": "1 Get Available SSL Certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"var certName = pm.environment.get(\"environment\") + \"-\" + pm.environment.get(\"app\") + \"-\" + pm.environment.get(\"year\") + \".crt\" ;",
											"",
											"",
											"if (responseCode.code === 200){",
											"    ",
											"    tests[\"Certificate is present, create SSL CLient Profile \"] = certName == respData.name;",
											"    postman.setNextRequest(\"3 Create SSL Profile\");",
											"    tests[\"Certificate: \" +respData.name] = respData.name;",
											"",
											"} else {",
											"    ",
											"    tests[\"Certificate is not present, continue to '2 Install SSL Certificate'\"] = respData.errorstack === \"404\";",
											"    postman.setNextRequest(\"2 Install SSL Certificate\");",
											"",
											"    ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"{{environment}}-{{app_name}}-{{year}}\",\n  \"command\":\"install\",\n  \"from-local-file\":\"/var/tmp/ssl_certs/{{environment}}-{{app_name}}-{{year}}.pfx\",\n  \"passphrase\":\"{{certificate_passphrase}}\"\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/sys/crypto/cert/{{environment}}-{{app}}-{{year}}.crt",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"sys",
										"crypto",
										"cert",
										"{{environment}}-{{app}}-{{year}}.crt"
									]
								},
								"description": "Verify if SSL Certificate is already available, if not proceed to install it"
							},
							"response": []
						},
						{
							"name": "2 Install SSL Certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"var certName = pm.environment.get(\"environment\") + \"-\" + pm.environment.get(\"app\") + \"-\" + pm.environment.get(\"year\") + \".crt\" ;",
											"",
											"if (responseCode.code !== 200){",
											"   ",
											"    tests[\"Certificate was not uploaded to the F5 device, stop the script\"] = respData.errorstack === \"200\";",
											"    postman.setNextRequest(null);",
											"",
											"} else {",
											"    ",
											"    tests[\"Certificate was successfully installed\"] = certName = respData.name;",
											"    tests[\"Certificate:\" +respData.name] = respData.name;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"{{environment}}-{{app}}-{{year}}\",\n  \"command\":\"install\",\n  \"from-local-file\":\"/var/tmp/ssl_certs/{{environment}}-{{app}}-{{year}}.pfx\",\n  \"passphrase\":\"{{certificate_passphrase}}\"\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/sys/crypto/pkcs12",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"sys",
										"crypto",
										"pkcs12"
									]
								},
								"description": "Install SSL Certificate, if not already available"
							},
							"response": []
						},
						{
							"name": "3 Create SSL Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"var clientSSL = pm.environment.get(\"environment\") + \"-\" + pm.environment.get(\"app\") + \"-\" + \"SSL\";",
											"",
											"tests[\"Client SSL Certificate was successfully created\"] = clientSSL = respData.name;",
											"tests[\"Client SSL:\" +respData.name] = respData.name;",
											"tests[\"Ciphers configured for this Client SSL Profile are: \" +respData.ciphers] = respData.ciphers;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"{{environment}}-{{app}}-SSL\",\n  \"defaultsFrom\": \"/Common/client_ssl_custom-ciphers\",\n  \"certKeyChain\": [\n        {\n            \"name\": \"{{environment}}-{{app}}-{{year}}\",\n            \"cert\": \"/Common/{{environment}}-{{app}}-{{year}}.crt\",\n            \"key\": \"/Common/{{environment}}-{{app}}-{{year}}.key\"\n            \n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/ltm/profile/clientSsl",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"ltm",
										"profile",
										"clientSsl"
									]
								},
								"description": "Create Client SSL Profile, using \"client_ssl_custom-ciphers\" as the parent profile. Paraent profile uses the following ciphers: ECDHE:AES256-SHA:AES+HIGH+EDH:AES+HIGH:AES+EDH:AES+MEDIUM:!LOW:!EXPORT:!ADH:!SSLv3:!SSLv2:!MD5:!3DES:!DHE:@STRENGTH"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pool",
					"description": "",
					"item": [
						{
							"name": "1 Create Pool",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"var poolName = pm.environment.get(\"environment\") + pm.environment.get(\"app\") + \"Pool\";",
											"tests[\"Pool was successfully created: \" +respData.name] = poolName;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"{{environment}}-{{app}}-Pool\",\n  \"monitor\": \"/Common/tcp\",\n  \"members\": [\n      {\"name\" :\"{{environment}}-{{app}}:443\", \"address\":\"{{node_ip}}\"}\n      ]\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/ltm/pool",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"ltm",
										"pool"
									]
								},
								"description": "create Pool"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Profiles",
					"description": "",
					"item": [
						{
							"name": "1 Create HTTP Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"tests[\"HTTP Profile was successfully created: \" +respData.name] = respData.name;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"{{environment}}-{{app}}-HTTP-Profile\",\n    \"insertXforwardedFor\": \"enabled\",\n    \"defaultsFrom\": \"/Common/http\"\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/ltm/profile/http",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"ltm",
										"profile",
										"http"
									]
								},
								"description": "Create HTTP profile, no XFF"
							},
							"response": []
						},
						{
							"name": "2 Create TCP WAN Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"tests[\"TCP WAN Optimized Profile was successfully created: \" +respData.name] = respData.name;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"{{environment}}-{{app}}-TCP-WAN-Profile\",\n    \"defaultsFrom\": \"/Common/tcp-wan-optimized\"\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/ltm/profile/tcp",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"ltm",
										"profile",
										"tcp"
									]
								},
								"description": "Create TCP WAN optimized profile"
							},
							"response": []
						},
						{
							"name": "3 Create TCP LAN Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"tests[\"TCP LAN Optimized Profile was successfully created: \" +respData.name] = respData.name;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"{{environment}}-{{app}}-TCP-LAN-Profile\",\n    \"defaultsFrom\": \"/Common/tcp-lan-optimized\"\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/ltm/profile/tcp",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"ltm",
										"profile",
										"tcp"
									]
								},
								"description": "Create TCP LAN optimized profile"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Virtual Servers",
					"description": "",
					"item": [
						{
							"name": "1 Create HTTPS Virtual Server",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"pm.test(\"HTTPS Virtual Server was successfully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"{{environment}}-{{app}}-VS\",\n  \"destination\":\"{{vs_ip_destination}}:443\",\n  \"description\": \"{{description}}\",\n    \"ipProtocol\":\"tcp\",\n    \"pool\":\"{{environment}}-{{app}}-Pool\",\n    \"profiles\": [\n        \"{{environment}}-{{app}}-HTTP-Profile\",\n        {\"name\":\"{{environment}}-{{app}}-TCP-WAN-Profile\", \"context\": \"clientside\"},\n        {\"name\":\"{{environment}}-{{app}}-TCP-LAN-Profile\", \"context\": \"serverside\"},\n        {\"name\":\"{{environment}}-{{app}}-SSL\", \"context\": \"clientside\"},\n        {\"name\":\"serverssl-insecure-compatible\", \"context\": \"serverside\"},\n        \"DoS_Profile\",\n        \"websecurity\"\n    ],\n    \"vlansEnabled\": true,\n    \"vlans\" : [\"{{vlanEnabledOn}}\"],\n    \"sourceAddressTranslation\": { \"type\":\"automap\" },\n    \"rules\": [\n        \"/Common/XFF-Spoof-Prevention\"\n    ],\n    \"securityLogProfiles\": [\n        \"{{log_local}}\",\n        \"{{log_remote}}\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/ltm/virtual",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"ltm",
										"virtual"
									]
								},
								"description": "Create HTTPS Virtual Server"
							},
							"response": []
						},
						{
							"name": "2 Create Redirect Virtual Server",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var respData = JSON.parse(responseBody);",
											"",
											"pm.test(\"HTTP Redirect Virtual Server was successfully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{bigip_auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"{{environment}}-{{app}}-VS-80-redirect\",\n  \"destination\":\"{{vs_ip_destination}}:80\",\n  \"description\": \"{{description}}\",\n    \"ipProtocol\":\"tcp\",\n    \"profiles\": [\n        \"{{environment}}-{{app}}-HTTP-Profile\",\n        {\"name\":\"{{environment}}-{{app}}-TCP-WAN-Profile\", \"context\": \"clientside\"},\n        {\"name\":\"{{environment}}-{{app}}-TCP-LAN-Profile\", \"context\": \"serverside\"}\n    ],\n    \"sourceAddressTranslation\": { \"type\":\"automap\" },\n    \"rules\": [\n        \"/Common/_sys_https_redirect\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{bigip_mgmt}}/mgmt/tm/ltm/virtual",
									"protocol": "https",
									"host": [
										"{{bigip_mgmt}}"
									],
									"path": [
										"mgmt",
										"tm",
										"ltm",
										"virtual"
									]
								},
								"description": "Create Redirect Virtual Server"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ASM Configuration",
			"description": "",
			"item": [
				{
					"name": "1 GET ASM Policy Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"var template = pm.environment.get(\"asm_template_name\");",
									"",
									"for (var i = 0; i < respData.totalItems; i++){",
									"    ",
									"    if (template == respData.items[i].name) {",
									"       ",
									"       var template_hash = respData.items[i].id;",
									"       pm.environment.set(\"asm_template_hash\", template_hash);",
									"       tests[\"ASM Template hash successfully updated\"] = responseCode.code === 200;",
									"        ",
									"    }",
									"    ",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{bigip_auth_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "https://{{bigip_mgmt}}/mgmt/tm/asm/policy-templates/",
							"protocol": "https",
							"host": [
								"{{bigip_mgmt}}"
							],
							"path": [
								"mgmt",
								"tm",
								"asm",
								"policy-templates",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2 Create ASM Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has token: \" +respData.id] = respData.id;",
									"",
									"postman.setEnvironmentVariable('asm_policy_hash',respData.id);",
									"",
									"pm.test(\"ASM Policy was successfully created\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{bigip_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{app}}-ASM\",\r\n    \"description\":\"{{app}} ASM policy\",\r\n    \"applicationLanguage\":\"utf-8\",\r\n    \"templateReference\" : {\r\n      \"link\": \"https://localhost/mgmt/tm/asm/policy-templates/{{asm_template_hash}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "https://{{bigip_mgmt}}/mgmt/tm/asm/policies",
							"protocol": "https",
							"host": [
								"{{bigip_mgmt}}"
							],
							"path": [
								"mgmt",
								"tm",
								"asm",
								"policies"
							]
						},
						"description": "Create an ASM Policy referencing a Parent ASM policy"
					},
					"response": []
				},
				{
					"name": "3 Activate ASM Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has token: \" +respData.id] = respData.id;",
									"",
									"postman.setEnvironmentVariable('asm_activate_hash',respData.id);",
									"",
									"pm.test(\"ASM Policy was successfully created\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{bigip_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"policyReference\": {\r\n    \"link\":  \"https://localhost/mgmt/tm/asm/policies/{{asm_policy_hash}}\"\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{bigip_mgmt}}/mgmt/tm/asm/tasks/apply-policy",
							"protocol": "https",
							"host": [
								"{{bigip_mgmt}}"
							],
							"path": [
								"mgmt",
								"tm",
								"asm",
								"tasks",
								"apply-policy"
							]
						},
						"description": "After creation on step 3, the ASM Policy needs to be activated before bbeen applied to a VS"
					},
					"response": []
				},
				{
					"name": "6 Assign ASM Policy to HTTPS VS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has token: \" +respData.id] = respData.id;",
									"",
									"pm.test(\"ASM Policy was successfully created\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{bigip_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"virtualServers\":[\"/Common/{{environment}}-{{app}}-VS\"]\r\n}"
						},
						"url": {
							"raw": "https://{{bigip_mgmt}}/mgmt/tm/asm/policies/{{asm_policy_hash}}",
							"protocol": "https",
							"host": [
								"{{bigip_mgmt}}"
							],
							"path": [
								"mgmt",
								"tm",
								"asm",
								"policies",
								"{{asm_policy_hash}}"
							]
						},
						"description": "Assign ASM policy to the appropriate HTTPS VS"
					},
					"response": []
				},
				{
					"name": "Get Status of Policy Activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"if (respData.status == \"COMPLETED\"){",
									"   ",
									"    tests[\"Activation Completed\"] = respData.status == \"COMPLETED\";",
									"    postman.setNextRequest(\"4 Assign ASM Policy to HTTPS VS\");",
									"",
									"} else {",
									"    ",
									"    //tests[\"Activation not yet completed, verify again\"] = respData.status != \"COMPLETED\";",
									"    postman.setNextRequest(\"Wait until policy is active\");",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{bigip_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"policyReference\": {\r\n    \"link\":  \"https://localhost/mgmt/tm/asm/policies/{{asm_policy_hash}}\"\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{bigip_mgmt}}/mgmt/tm/asm/tasks/apply-policy/{{asm_activate_hash}}",
							"protocol": "https",
							"host": [
								"{{bigip_mgmt}}"
							],
							"path": [
								"mgmt",
								"tm",
								"asm",
								"tasks",
								"apply-policy",
								"{{asm_activate_hash}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Wait until policy is active",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var date = new Date();\r",
									"  var curDate = null;\r",
									"  do {\r",
									"    curDate = new Date();\r",
									"  }\r",
									"  while (curDate - date < 5000);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"if (respData.status == \"COMPLETED\"){",
									"   ",
									"    tests[\"Activation Completed\"] = respData.status == \"COMPLETED\";",
									"    postman.setNextRequest(\"4 Assign ASM Policy to HTTPS VS\");",
									"",
									"} else {",
									"    ",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{bigip_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"policyReference\": {\r\n    \"link\":  \"https://localhost/mgmt/tm/asm/policies/{{asm_policy_hash}}\"\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{bigip_mgmt}}/mgmt/tm/asm/tasks/apply-policy/{{asm_activate_hash}}",
							"protocol": "https",
							"host": [
								"{{bigip_mgmt}}"
							],
							"path": [
								"mgmt",
								"tm",
								"asm",
								"tasks",
								"apply-policy",
								"{{asm_activate_hash}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ccca404d-e991-46f2-9537-7da58c4f2e39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9b9bb5c3-0a7d-435b-a65b-47f3170a6c01",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d2d392f0-b954-4d3a-99ac-945df0e3247b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e7f4d603-99d3-4e7a-ac06-431fcf372d00",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}